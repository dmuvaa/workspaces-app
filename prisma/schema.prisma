// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String     @id @default(cuid())
  email       String     @unique
  password    String
  firstName   String
  lastName    String
  name        String?
  role        Role       @default(USER)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  workspaces  Workspace[]
  reviews     Review[]
}

model Workspace {
  id           String     @id @default(cuid())
  name         String
  description  String
  officeTypes  String[]
  images       String[]
  pricing      Json
  website      String
  email        String
  status       WorkspaceStatus @default(PENDING)
  featured     Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  location     Location   @relation(fields: [locationId], references: [id])
  locationId   String     @unique
  amenities    Amenity[]  @relation("WorkspaceAmenities")
  reviews      Review[]
}

model Location {
  id           String     @id @default(cuid())
  country      String
  address      String
  building     String?
  floorNumber  String?
  officeNumber String?
  workspace    Workspace?
  cityId       String
  city         City       @relation(fields: [cityId], references: [id])
}

model Country {
  id     String @id @default(cuid())
  name   String @unique
  cities City[]
}

model City {
  id        String     @id @default(cuid())
  name      String
  countryId String
  country   Country    @relation(fields: [countryId], references: [id])
  locations Location[]
}

model Amenity {
  id         String      @id @default(cuid())
  name       String
  workspaces Workspace[] @relation("WorkspaceAmenities")
}

model Review {
  id          String    @id @default(cuid())
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

enum WorkspaceStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum Role {
  USER
  ADMIN
}